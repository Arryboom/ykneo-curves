package com.yubico.ykneo.curves;

/* Copyright (c) 2013 Yubico AB 
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import javacard.security.ECPrivateKey;
import javacard.security.ECPublicKey;
import javacard.security.KeyPair;

public class Gost2001 {

	private final static byte[] q = {
		(byte)0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x31
	};

	private final static byte[] a = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07
	};

	private final static byte[] b = {
		0x5f, (byte)0xbf, (byte)0xf4, (byte)0x98, (byte)0xaa, (byte)0x93, (byte)0x8c, (byte)0xe7, 0x39, (byte)0xb8, (byte)0xe0, 0x22, (byte)0xfb, (byte)0xaf, (byte)0xef, 0x40, 0x56, 0x3f, 0x6e, 0x6a, 0x34, 0x72, (byte)0xfc, 0x2a, 0x51, 0x4c, 0x0c, (byte)0xe9, (byte)0xda, (byte)0xe2, 0x3b, 0x7e
	};

	private final static byte[] G = {
		0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x08, (byte)0xe2, (byte)0xa8, (byte)0xa0, (byte)0xe6, 0x51, 0x47, (byte)0xd4, (byte)0xbd, 0x63, 0x16, 0x03, 0x0e, 0x16, (byte)0xd1, (byte)0x9c, (byte)0x85, (byte)0xc9, 0x7f, 0x0a, (byte)0x9c, (byte)0xa2, 0x67, 0x12, 0x2b, (byte)0x96, (byte)0xab, (byte)0xbc, (byte)0xea, 0x7e, (byte)0x8f, (byte)0xc8
	};

	private final static byte[] r = { // n?
		(byte)0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x50, (byte)0xfe, (byte)0x8a, 0x18, (byte)0x92, (byte)0x97, 0x61, 0x54, (byte)0xc5, (byte)0x9c, (byte)0xfc, 0x19, 0x3a, (byte)0xcc, (byte)0xf5, (byte)0xb3
	};

	static public KeyPair newKeyPair() {
		KeyPair key = new KeyPair(KeyPair.ALG_EC_FP, (short) 256);

		ECPrivateKey privKey = (ECPrivateKey) key.getPrivate();
		ECPublicKey pubKey = (ECPublicKey) key.getPublic();

		privKey.setFieldFP(q, (short) 0, (short) q.length);
		privKey.setA(a, (short) 0, (short) a.length);
		privKey.setB(b, (short) 0, (short) b.length);
		privKey.setG(G, (short) 0, (short) G.length);
		privKey.setR(r, (short) 0, (short) r.length);

		pubKey.setFieldFP(q, (short) 0, (short) q.length);
		pubKey.setA(a, (short) 0, (short) a.length);
		pubKey.setB(b, (short) 0, (short) b.length);
		pubKey.setG(G, (short) 0, (short) G.length);
		pubKey.setR(r, (short) 0, (short) r.length);

		return key;
	}
}
