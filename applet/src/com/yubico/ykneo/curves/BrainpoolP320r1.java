package com.yubico.ykneo.curves;

/* Copyright (c) 2013 Yubico AB 
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import javacard.security.ECPrivateKey;
import javacard.security.ECPublicKey;
import javacard.security.KeyPair;

public class BrainpoolP320r1 {

	private final static byte[] q = {
		(byte)0xd3, 0x5e, 0x47, 0x20, 0x36, (byte)0xbc, 0x4f, (byte)0xb7, (byte)0xe1, 0x3c, 0x78, 0x5e, (byte)0xd2, 0x01, (byte)0xe0, 0x65, (byte)0xf9, (byte)0x8f, (byte)0xcf, (byte)0xa6, (byte)0xf6, (byte)0xf4, 0x0d, (byte)0xef, 0x4f, (byte)0x92, (byte)0xb9, (byte)0xec, 0x78, (byte)0x93, (byte)0xec, 0x28, (byte)0xfc, (byte)0xd4, 0x12, (byte)0xb1, (byte)0xf1, (byte)0xb3, 0x2e, 0x27
	};

	private final static byte[] a = {
		0x3e, (byte)0xe3, 0x0b, 0x56, (byte)0x8f, (byte)0xba, (byte)0xb0, (byte)0xf8, (byte)0x83, (byte)0xcc, (byte)0xeb, (byte)0xd4, 0x6d, 0x3f, 0x3b, (byte)0xb8, (byte)0xa2, (byte)0xa7, 0x35, 0x13, (byte)0xf5, (byte)0xeb, 0x79, (byte)0xda, 0x66, 0x19, 0x0e, (byte)0xb0, (byte)0x85, (byte)0xff, (byte)0xa9, (byte)0xf4, (byte)0x92, (byte)0xf3, 0x75, (byte)0xa9, 0x7d, (byte)0x86, 0x0e, (byte)0xb4
	};

	private final static byte[] b = {
		0x52, 0x08, (byte)0x83, (byte)0x94, (byte)0x9d, (byte)0xfd, (byte)0xbc, 0x42, (byte)0xd3, (byte)0xad, 0x19, (byte)0x86, 0x40, 0x68, (byte)0x8a, 0x6f, (byte)0xe1, 0x3f, 0x41, 0x34, (byte)0x95, 0x54, (byte)0xb4, (byte)0x9a, (byte)0xcc, 0x31, (byte)0xdc, (byte)0xcd, (byte)0x88, 0x45, 0x39, (byte)0x81, 0x6f, 0x5e, (byte)0xb4, (byte)0xac, (byte)0x8f, (byte)0xb1, (byte)0xf1, (byte)0xa6
	};

	private final static byte[] G = {
		0x04, 0x43, (byte)0xbd, 0x7e, (byte)0x9a, (byte)0xfb, 0x53, (byte)0xd8, (byte)0xb8, 0x52, (byte)0x89, (byte)0xbc, (byte)0xc4, (byte)0x8e, (byte)0xe5, (byte)0xbf, (byte)0xe6, (byte)0xf2, 0x01, 0x37, (byte)0xd1, 0x0a, 0x08, 0x7e, (byte)0xb6, (byte)0xe7, (byte)0x87, 0x1e, 0x2a, 0x10, (byte)0xa5, (byte)0x99, (byte)0xc7, 0x10, (byte)0xaf, (byte)0x8d, 0x0d, 0x39, (byte)0xe2, 0x06, 0x11, 0x14, (byte)0xfd, (byte)0xd0, 0x55, 0x45, (byte)0xec, 0x1c, (byte)0xc8, (byte)0xab, 0x40, (byte)0x93, 0x24, 0x7f, 0x77, 0x27, 0x5e, 0x07, 0x43, (byte)0xff, (byte)0xed, 0x11, 0x71, (byte)0x82, (byte)0xea, (byte)0xa9, (byte)0xc7, 0x78, 0x77, (byte)0xaa, (byte)0xac, 0x6a, (byte)0xc7, (byte)0xd3, 0x52, 0x45, (byte)0xd1, 0x69, 0x2e, (byte)0x8e, (byte)0xe1
	};

	private final static byte[] r = { // n?
		(byte)0xd3, 0x5e, 0x47, 0x20, 0x36, (byte)0xbc, 0x4f, (byte)0xb7, (byte)0xe1, 0x3c, 0x78, 0x5e, (byte)0xd2, 0x01, (byte)0xe0, 0x65, (byte)0xf9, (byte)0x8f, (byte)0xcf, (byte)0xa5, (byte)0xb6, (byte)0x8f, 0x12, (byte)0xa3, 0x2d, 0x48, 0x2e, (byte)0xc7, (byte)0xee, (byte)0x86, 0x58, (byte)0xe9, (byte)0x86, (byte)0x91, 0x55, 0x5b, 0x44, (byte)0xc5, (byte)0x93, 0x11
	};

	static public KeyPair newKeyPair() {
		KeyPair key = new KeyPair(KeyPair.ALG_EC_FP, (short) 320);

		ECPrivateKey privKey = (ECPrivateKey) key.getPrivate();
		ECPublicKey pubKey = (ECPublicKey) key.getPublic();

		privKey.setFieldFP(q, (short) 0, (short) q.length);
		privKey.setA(a, (short) 0, (short) a.length);
		privKey.setB(b, (short) 0, (short) b.length);
		privKey.setG(G, (short) 0, (short) G.length);
		privKey.setR(r, (short) 0, (short) r.length);

		pubKey.setFieldFP(q, (short) 0, (short) q.length);
		pubKey.setA(a, (short) 0, (short) a.length);
		pubKey.setB(b, (short) 0, (short) b.length);
		pubKey.setG(G, (short) 0, (short) G.length);
		pubKey.setR(r, (short) 0, (short) r.length);

		return key;
	}
}
