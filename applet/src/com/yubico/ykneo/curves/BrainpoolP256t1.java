package com.yubico.ykneo.curves;

/* Copyright (c) 2013 Yubico AB 
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import javacard.security.ECPrivateKey;
import javacard.security.ECPublicKey;
import javacard.security.KeyPair;

public class BrainpoolP256t1 {

	private final static byte[] q = {
		(byte)0xa9, (byte)0xfb, 0x57, (byte)0xdb, (byte)0xa1, (byte)0xee, (byte)0xa9, (byte)0xbc, 0x3e, 0x66, 0x0a, (byte)0x90, (byte)0x9d, (byte)0x83, (byte)0x8d, 0x72, 0x6e, 0x3b, (byte)0xf6, 0x23, (byte)0xd5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1d, 0x1f, 0x6e, 0x53, 0x77
	};

	private final static byte[] a = {
		(byte)0xa9, (byte)0xfb, 0x57, (byte)0xdb, (byte)0xa1, (byte)0xee, (byte)0xa9, (byte)0xbc, 0x3e, 0x66, 0x0a, (byte)0x90, (byte)0x9d, (byte)0x83, (byte)0x8d, 0x72, 0x6e, 0x3b, (byte)0xf6, 0x23, (byte)0xd5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1d, 0x1f, 0x6e, 0x53, 0x74
	};

	private final static byte[] b = {
		0x66, 0x2c, 0x61, (byte)0xc4, 0x30, (byte)0xd8, 0x4e, (byte)0xa4, (byte)0xfe, 0x66, (byte)0xa7, 0x73, 0x3d, 0x0b, 0x76, (byte)0xb7, (byte)0xbf, (byte)0x93, (byte)0xeb, (byte)0xc4, (byte)0xaf, 0x2f, 0x49, 0x25, 0x6a, (byte)0xe5, (byte)0x81, 0x01, (byte)0xfe, (byte)0xe9, 0x2b, 0x04
	};

	private final static byte[] G = {
		0x04, (byte)0xa3, (byte)0xe8, (byte)0xeb, 0x3c, (byte)0xc1, (byte)0xcf, (byte)0xe7, (byte)0xb7, 0x73, 0x22, 0x13, (byte)0xb2, 0x3a, 0x65, 0x61, 0x49, (byte)0xaf, (byte)0xa1, 0x42, (byte)0xc4, 0x7a, (byte)0xaf, (byte)0xbc, 0x2b, 0x79, (byte)0xa1, (byte)0x91, 0x56, 0x2e, 0x13, 0x05, (byte)0xf4, 0x2d, (byte)0x99, 0x6c, (byte)0x82, 0x34, 0x39, (byte)0xc5, 0x6d, 0x7f, 0x7b, 0x22, (byte)0xe1, 0x46, 0x44, 0x41, 0x7e, 0x69, (byte)0xbc, (byte)0xb6, (byte)0xde, 0x39, (byte)0xd0, 0x27, 0x00, 0x1d, (byte)0xab, (byte)0xe8, (byte)0xf3, 0x5b, 0x25, (byte)0xc9, (byte)0xbe
	};

	private final static byte[] r = { // n?
		(byte)0xa9, (byte)0xfb, 0x57, (byte)0xdb, (byte)0xa1, (byte)0xee, (byte)0xa9, (byte)0xbc, 0x3e, 0x66, 0x0a, (byte)0x90, (byte)0x9d, (byte)0x83, (byte)0x8d, 0x71, (byte)0x8c, 0x39, 0x7a, (byte)0xa3, (byte)0xb5, 0x61, (byte)0xa6, (byte)0xf7, (byte)0x90, 0x1e, 0x0e, (byte)0x82, (byte)0x97, 0x48, 0x56, (byte)0xa7
	};

	static public KeyPair newKeyPair() {
		KeyPair key = new KeyPair(KeyPair.ALG_EC_FP, (short) 256);

		ECPrivateKey privKey = (ECPrivateKey) key.getPrivate();
		ECPublicKey pubKey = (ECPublicKey) key.getPublic();

		privKey.setFieldFP(q, (short) 0, (short) q.length);
		privKey.setA(a, (short) 0, (short) a.length);
		privKey.setB(b, (short) 0, (short) b.length);
		privKey.setG(G, (short) 0, (short) G.length);
		privKey.setR(r, (short) 0, (short) r.length);

		pubKey.setFieldFP(q, (short) 0, (short) q.length);
		pubKey.setA(a, (short) 0, (short) a.length);
		pubKey.setB(b, (short) 0, (short) b.length);
		pubKey.setG(G, (short) 0, (short) G.length);
		pubKey.setR(r, (short) 0, (short) r.length);

		return key;
	}
}
